import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from config.config import Config, load_config
from handlers.base_commands_handlers import base_commands_router
from handlers.save_headers_handler import shop_data_router


logger = logging.getLogger(__name__)


async def base_commands(_bot):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é' —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥."""
    await _bot.set_my_commands(
        [
            BotCommand(command='help', description='‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.'),
            BotCommand(command='shop_data', description='üîë –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ id –º–∞–≥–∞–∑–∏–Ω–∞'),
            BotCommand(command='real_data', description='üìà –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.'),
        ]
    )


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format='%(filename)s:%(lineno)d #%(levelname)-8s '
               '[%(asctime)s] - %(name)s - %(message)s'
    )
    logger.info('Starting bot')

    config: Config = load_config()

    bot = Bot(token=config.tg_bot.token,
              parse_mode='HTML')
    dp = Dispatcher()
    dp.include_router(base_commands_router)
    dp.include_router(shop_data_router)
    await base_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    
    
if __name__ == '__main__':
    asyncio.run(main())